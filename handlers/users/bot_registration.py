""" –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞ """

import re
from aiogram import types
from aiogram.dispatcher import FSMContext
from filters import IsPrivate
from handlers.users.my_qrcode import send_qr_code
from keyboards.default import cancel_registration, kb_sms
from loader import dp
from parser.verification import main_authorize
from states import Registration
from utils.db_api.ie_commands import change_email_and_password, get_sms_status_ie
from utils.db_api.users_commands import update_card_number, update_phone_number, update_sms_status, get_number_ie, \
    get_user_id_by_card_number, get_card_number_by_user_id
from utils.notify_admins import send_admins, new_user_registration


@dp.message_handler(text='–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
async def cast(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ')


@dp.message_handler(text=['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '/register'])
async def register(message: types.Message):
    user_id = int(message.from_user.id)
    cards = await get_card_number_by_user_id(user_id)
    if cards == '0':
        await message.answer('–î–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–∞–∫–æ–π –∫–∞—Ä—Ç–æ–π –í—ã –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –∫–æ—Ñ–µ, –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–µ –¥–≤–µ —Ü–∏—Ñ—Ä—ã —Å–≤–æ–µ–π –∫–∞—Ä—Ç—ã, '
                             '–ø–æ—Ç–æ–º 4 –∑–≤–µ–∑–¥–æ—á–∫–∏ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–µ—Ç—ã—Ä–µ —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã, \n–Ω–∞–ø—Ä–∏–º–µ—Ä: 22****7192')
        await message.answer('–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:', reply_markup=cancel_registration)
        await Registration.number.set()
    else:
        await message.answer(f'–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í–∞—à–∏ –∫–∞—Ä—Ç—ã: \n{cards}\n'
                             f'–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é –ø—É–Ω–∫—Ç /cards')


@dp.message_handler(state=Registration.number)
async def get_number(message: types.Message, state: FSMContext):
    number = message.text
    if number == "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é":
        await state.finish()
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ')
    else:
        user_id = int(message.from_user.id)

        if validate_number(number):
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤ –ë–î
            await update_card_number(user_id, number)
            await state.finish()

            user_id_ie = await get_number_ie(message.from_user.id)
            # —Å–º–æ—Ç—Ä–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–∏ –°–ú–° —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–æ—Ñ–µ–π–Ω–µ
            if await get_sms_status_ie(user_id_ie):
                await message.answer('üëç–û—Ç–ª–∏—á–Ω–æ!')
                await message.answer('–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –°–ú–° —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?', reply_markup=kb_sms)
            else:
                await message.answer(
                    'üëç–û—Ç–ª–∏—á–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ç–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–µ '
                    '–±–æ–Ω—É—Å–æ–≤ –≤ telegram –±–æ—Ç–µ!üì≤\n'
                    '1 –±–æ–Ω—É—Å = 1 —Ä—É–±–ª—é! –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø–∏—Ç–æ–∫ –∏ –ø—Ä–∏–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É –∫–∞–∫ –æ–±—ã—á–Ω–æ –∫ —Ç–µ—Ä–º–∏–Ω–∞–ª—É!'
                    '–ü—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –Ω–∞–ª–∏—á–∏–∏ –±–æ–Ω—É—Å–æ–≤ –¥–µ–Ω—å–≥–∏ –Ω–µ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –∏ —É –í–∞—Å –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–æ "–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞"!')
                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await new_user_registration(dp=dp, username=message.from_user.username)

        else:
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü—Ä–∏–º–µ—Ä: 22****7192:', reply_markup=cancel_registration)


def validate_number(number):
    pattern = r'^\d{2}\*\*\*\*\d{4}$'
    return re.match(pattern, number) is not None


@dp.message_handler(text='–¥–∞')
async def register(message: types.Message):
    await message.answer('–ù–∞ –∫–∞–∫–æ–π –Ω–æ–º–µ—Ä –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∞—Ç—å –°–ú–° —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?')
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89886654411:', reply_markup=cancel_registration)
    await Registration.phone.set()


@dp.message_handler(state=Registration.phone)
async def get_phone(message: types.Message, state: FSMContext):
    phone = message.text
    if phone == "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é":
        await state.finish()
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ')
    else:
        user_id = int(message.from_user.id)
        if validate_phone(phone):
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤ –ë–î
            await update_phone_number(user_id, phone)
            await update_sms_status(user_id, True)
            await message.answer('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ telegram –∏ –ø–æ –°–ú–°\n'
                                 '–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –°–ú–°, –≤ –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç "–°–ú–° —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"')
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await new_user_registration(dp=dp, username=message.from_user.username)
            await state.finish()
        else:
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü—Ä–∏–º–µ—Ä: 89886654411:',
                                 reply_markup=cancel_registration)


def validate_phone(phone):
    pattern = r'^89\d{9}$'
    return re.match(pattern, phone) is not None


@dp.message_handler(text='–Ω–µ—Ç')
async def register(message: types.Message, state: FSMContext):
    await message.answer('üëç–û—Ç–ª–∏—á–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ç–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–µ '
                         '–±–æ–Ω—É—Å–æ–≤ –≤ telegram –±–æ—Ç–µ!üì≤')
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await new_user_registration(dp=dp, username=message.from_user.username)
    await state.finish()
