""" –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã """

import re
from aiogram import types
from loader import dp
from utils.db_api.users_commands import get_card_number_by_user_id, update_card_number, remove_card_number
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext


class Cards(StatesGroup):
    number = State()
    number_delete = State()


kb_cards = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É"),
            KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É"),
            KeyboardButton(text="O—Ç–º–µ–Ω–∞"),
        ],

    ],
    resize_keyboard=True,
    one_time_keyboard=True
)


cards_cancel = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="O—Ç–º–µ–Ω–∞"),
        ],

    ],
    resize_keyboard=True,
    one_time_keyboard=True
)


@dp.message_handler(text='O—Ç–º–µ–Ω–∞')
async def cast(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ')


@dp.message_handler(text='/cards')
async def cards_change(message: types.Message):
    user_id = int(message.from_user.id)
    cards = await get_card_number_by_user_id(user_id)
    if cards == '0':
        await message.answer('–£ –í–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç, –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /register')
    else:
        await message.answer(f'–í–∞—à–∏ –∫–∞—Ä—Ç—ã: \n{cards}\n'
                             f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb_cards)


@dp.message_handler(text='–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É')
async def register(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: 22****3317')
    await Cards.number.set()


@dp.message_handler(state=Cards.number)
async def get_number(message: types.Message, state: FSMContext):
    number = message.text
    if number == "O—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ')
    else:
        user_id = int(message.from_user.id)

        if validate_number(number):
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤ –ë–î
            if await update_card_number(user_id, number):
                await state.finish()
                await message.answer(f'üëç–û—Ç–ª–∏—á–Ω–æ! –ö–∞—Ä—Ç–∞ {number} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!')

        else:
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü—Ä–∏–º–µ—Ä: 22****7192:', reply_markup=cards_cancel)


def validate_number(number):
    pattern = r'^\d{2}\*\*\*\*\d{4}$'
    return re.match(pattern, number) is not None


@dp.message_handler(text='–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É')
async def delete_card(message: types.Message):
    user_id = int(message.from_user.id)
    cards = await get_card_number_by_user_id(user_id)
    await message.answer(f'–í–∞—à–∏ –∫–∞—Ä—Ç—ã: \n{cards}\n'
                         f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:')
    await Cards.number_delete.set()


@dp.message_handler(state=Cards.number_delete)
async def number_delete(message: types.Message, state: FSMContext):
    number = message.text
    if number == "O—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ')
    else:
        user_id = int(message.from_user.id)

        if validate_number(number):
            # —É–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤ –ë–î
            await remove_card_number(user_id, number)
            await state.finish()
            await message.answer(f'üëç–û—Ç–ª–∏—á–Ω–æ! –ö–∞—Ä—Ç–∞ {number} —É–¥–∞–ª–µ–Ω–∞!')

        else:
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü—Ä–∏–º–µ—Ä: 22****7192:', reply_markup=cards_cancel)
