import aiohttp
import asyncio
from bs4 import BeautifulSoup
from loguru import logger
from utils.db_api.ie_commands import change_last_time, get_last_time
from datetime import datetime
from loader import bot

from utils.db_api.users_commands import get_user_id_by_card_number, update_bonus


async def current_time_formatted():
    current_time = datetime.now()
    formatted_time = current_time.strftime("%d.%m.%Y %H:%M:%S")
    return formatted_time


async def compare_dates(date_str_pars, date_str_bd):
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ –æ–±—ä–µ–∫—Ç—ã datetime
    date_str_pars = datetime.strptime(date_str_pars, '%d.%m.%Y %H:%M:%S')
    date_str_bd = datetime.strptime(date_str_bd, '%d.%m.%Y %H:%M:%S')

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞—Ç
    if date_str_pars > date_str_bd:
        return True
    else:
        return False


async def parse_amount_string(amount_str):
    try:

        # –£–¥–∞–ª—è–µ–º –¥–≤–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–º–≤–æ–ª–∞ –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
        amount_str_cleaned = amount_str.replace("\xa0", "").replace(" ", "")[:-2].replace(",", ".")
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∏–ø float
        amount_float = float(amount_str_cleaned)
        return amount_float
    except ValueError:
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Ç—Ä–æ–∫–∏
        return None


stop_flag = False  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–∏–∫–ª–æ–º


class AsyncLoginSessionManager:
    instance = None  # –°—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞

    def __init__(self, login_url='https://p.vendista.ru/Auth/Login'):
        self.login_url = login_url
        self.session = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∞–Ω—Å –∫–∞–∫ –ù–µ—Ç

    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self

    async def __aexit__(self, exc_type, exc, tb):
        await self.session.close()

    async def login(self, login, password):
        async with self.session.get(self.login_url) as response:
            html = await response.text()

        soup = BeautifulSoup(html, 'html.parser')
        verification_token = soup.find('input', {'name': '__RequestVerificationToken'}).get('value')

        auth_url = 'https://p.vendista.ru/Auth/Login'
        login_data = {
            '__RequestVerificationToken': verification_token,
            'returnUrl': '',
            'Login': login,
            'Password': password,
        }

        async with self.session.post(auth_url, data=login_data) as response:
            if response.ok:
                return True
            else:
                logger.error('Authentication failed!')
                return False

    async def get_bonuses_data(self, user_data):
        user_id = user_data['user_id']

        try:
            while not stop_flag:  # –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ñ–ª–∞–≥ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
                unique_card_numbers = set()

                for page_number in range(1, 2):
                    bonuses_url_page = f'https://p.vendista.ru/Bonuses?OrderByColumn=3&OrderDesc=True&PageNumber={page_number}&ItemsOnPage=200&FilterText='

                    async with self.session.get(bonuses_url_page) as response_bonuses:
                        html_bonuses_page = await response_bonuses.text()

                    soup_bonuses_page = BeautifulSoup(html_bonuses_page, 'html.parser')
                    rows = soup_bonuses_page.select('.catalog__body .row')

                    # —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                    date_str_now = str(await current_time_formatted())
                    # –≤—Ä–µ–º—è –∏–∑ –ë–î –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    date_str_bd = await get_last_time(int(user_id))
                    date_str_bd = '11.12.2023 20:00:00'

                    for row in rows:
                        columns = row.select('.catalog__table_td')
                        if columns:
                            card_number = columns[1].text.strip()
                            bonus_balance = columns[3].text.strip()
                            sale_time = columns[4].text.strip()
                            unique_card_numbers.add(card_number)

                            # —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏
                            if await compare_dates(sale_time, date_str_bd):
                                # —Å–º–æ—Ç—Ä–∏–º —É –∫–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
                                user = await get_user_id_by_card_number(card_number)
                                if user:
                                    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                                    await bot.send_message(user, f'–±–æ–Ω—É—Å—ã üí≥{card_number}: {bonus_balance}')
                                    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ –≤ –ë–î
                                    bonus = await parse_amount_string(bonus_balance)
                                    await update_bonus(user, bonus)

                    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ë–î
                    await change_last_time(user_id, date_str_now)
                await asyncio.sleep(1)
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è User ID {user_id}!', e)

    @classmethod
    def get_instance(cls):
        if not cls.instance:
            cls.instance = cls()
        return cls.instance


async def stop_processing():
    global stop_flag
    stop_flag = True  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É


async def start_processing():
    global stop_flag
    stop_flag = False  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É


async def process_user(user_data):
    async with AsyncLoginSessionManager() as async_session_manager:
        try:
            if await async_session_manager.login(user_data['login'], user_data['password']):
                await async_session_manager.get_bonuses_data(user_data)
        except asyncio.CancelledError:
            pass  # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã.

        await stop_processing()  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏


async def parsing_main(users_data):
    tasks = [process_user(user_data) for user_data in users_data]
    await asyncio.gather(*tasks)


if __name__ == "__main__":
    users_data_ = [
        {'user_id': 5669831950, 'login': 'golana127@mail.ru', 'password': 'qrjyat'},
        {'user_id': 1009831950, 'login': 'rrrr@mail.ru', 'password': 'dddd'}
    ]

    asyncio.run(parsing_main(users_data_))
